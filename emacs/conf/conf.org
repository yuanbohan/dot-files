#+PROPERTY: header-args :comments yes :results silent

* speed init

[[https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/][reddit]]

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000)
#+END_SRC

* use-package

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  ;; if you use any :bind variant
  (use-package bind-key
    :ensure t
    :config
    (require 'bind-key))
#+END_SRC

* benchmark-init

find which makes init slow
~(emacs-init-time)~ can get the init time

#+BEGIN_SRC emacs-lisp
  ;; (use-package benchmark-init
  ;;   :ensure t
  ;;   :init
  ;;   (benchmark-init/activate)
  ;;   :config
  ;;   ;; To disable collection of benchmark data after init is done.
  ;;   (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC

* diminish

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (require 'diminish))
#+END_SRC

* backup

#+BEGIN_SRC emacs-lisp
  ;; https://www.emacswiki.org/emacs/BackupDirectory
  (setq backup-directory-alist
        `((".*" . "~/.emacs.d/backup/")))
  (setq auto-save-file-name-transforms
        `((".*" "~/.emacs.d/backup/" t)))
#+END_SRC

* replace tab with space
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)
#+END_SRC

* utf-8 encoding

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* display time

#+BEGIN_SRC emacs-lisp
  ;; (setq display-time-24hr-format t)
  ;; (setq display-time-format "%H:%M")
  ;; (display-time-mode 1)
#+END_SRC

* yes-or-no

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p) ; yes/no -> y/n
#+END_SRC

* font

#+BEGIN_SRC emacs-lisp
  ;; (set-frame-font "JetBrains Mono 24" nil t) ; https://www.jetbrains.com/lp/mono/
  (set-frame-font "Ubuntu Mono 20" nil t) ; resolve org-mode chinese/english align issue
#+END_SRC

* global ui

#+BEGIN_SRC emacs-lisp
  ;; (setq inhibit-startup-screen t) ; hide the welcome screen
  ;; (setq initial-major-mode 'text-mode)
  (menu-bar-mode -1) ; hide menu bar
  (tool-bar-mode -1) ; hide tool bar
  (scroll-bar-mode -1) ; hide scroll bar
  (global-linum-mode -1) ; hide line number
  (global-hl-line-mode 1) ; highlight current line
  (setq column-number-mode t)
#+END_SRC

* transparency

#+BEGIN_SRC emacs-lisp
  ;; (set-frame-parameter (selected-frame) 'alpha '(85 100))
  ;; (add-to-list 'default-frame-alist '(alpha 85 100))
#+END_SRC

* smart-line

#+BEGIN_SRC emacs-lisp
  (defun duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank))
  (global-set-key (kbd "C-c C-`") 'duplicate-line)

  (defun smart-open-line ()
    "Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode."
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))
  (defun smart-open-line-above ()
    "Insert an empty line above the current line. Position the cursor at it's beginning, according to the current mode."
    (interactive)
    (move-beginning-of-line nil)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))
  (global-set-key (kbd "s-<return>") 'smart-open-line)
  (global-set-key (kbd "s-S-<return>") 'smart-open-line-above)

  (defun move-below-line-up ()
    "Join the current line with the next line."
    (interactive)
    (delete-indentation 1))
  (global-set-key (kbd "s-j") 'move-below-line-up)

  (global-set-key (kbd "C-M-l") 'goto-line)
#+END_SRC

* comment code

#+BEGIN_SRC emacs-lisp
  (defun comment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)))

  (global-set-key (kbd "s-/") 'comment-region-or-line)
#+END_SRC

* beacon

#+BEGIN_SRC emacs-lisp
    ;; https://github.com/Malabarba/beacon
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    (setq beacon-blink-duration 0.5)
    ;; (setq beacon-color "green")
    )
#+END_SRC

* theme

#+BEGIN_SRC emacs-lisp
  ;; (use-package dracula-theme
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'dracula t))

  (use-package zenburn-theme
    :ensure t
    :config
    (load-theme 'zenburn t))

  ;; (use-package solarized-theme
  ;;   :ensure t
  ;;   :config
  ;;   ;; (load-theme 'solarized-light t)
  ;;   (load-theme 'solarized-dark t))

  ;; (use-package spacemacs-theme
  ;;   :defer t
  ;;   :init (load-theme 'spacemacs-dark t))
#+END_SRC

* mode line

#+BEGIN_SRC emacs-lisp
  ;; (use-package powerline
  ;;   :ensure t
  ;;   :config
  ;;   (powerline-default-theme)
  ;;   ;; (powerline-center-theme)
  ;;   ;; (powerline-center-evil-theme)
  ;;   ;; (powerline-vim-theme)
  ;;   ;; (powerline-nano-theme)
  ;;   )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (spaceline-emacs-theme))
#+END_SRC

* exec-path-from-shell

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)
      ;; (exec-path-from-shell-copy-envs '("PATH"))
      ))
#+END_SRC

* yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer 5
    :config
    (yas-reload-all)
    (setq yas-wrap-around-region t)
    :hook (('prog-mode     . 'yas-minor-mode)
           ('org-mode      . 'yas-minor-mode)
           ('LaTeX-mode    . 'yas-minor-mode)
           ('markdown-mode . 'yas-minor-mode)))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+END_SRC

* recentf

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :ensure t
    :config
    (recentf-mode 1)
    (setq recentf-max-saved-items 200
          recentf-max-menu-items 15)
    (run-at-time nil (* 5 60) 'recentf-save-list))
#+END_SRC

* projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy)
    (setq projectile-dynamic-mode-line nil)
    :bind-keymap
    ("s-p" . projectile-command-map))

  ;; (use-package helm-projectile
  ;;   :ensure t
  ;;   :config
  ;;   (projectile-global-mode 1)
  ;;   (helm-projectile-on)
  ;;   ;; (setq projectile-completion-system 'helm)
  ;;   (setq projectile-switch-project-action 'helm-projectile)
  ;;   )
#+END_SRC

* ivy

- [[https://oremacs.com/swiper][ivy user manual]]
- [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][ivy demo]]

| Key        | Command                 | Description                                    |
|------------+-------------------------+------------------------------------------------|
| M-n        | ivy-next-line           | Next line                                      |
| M-p        | ivy-previous-line       | Previous line                                  |
| M-<        | ivy-beginning-of-buffer | Beginning of the Ivy minibuffer                |
| M->        | ivy-end-of-buffer       | End of the Ivy minibuffer                      |
| C-v        | ivy-scroll-up-command   | Page up by one Ivy buffer size                 |
| M-v        | ivy-scroll-down-command | Page down by one Ivy buffer size               |
| C-m or RET | ivy-done                | Calls the default action                       |
| ~C-M-m~      | ivy-call                | Calls the default action, keeps Ivy open       |
| ~M-o~        | ivy-dispatching-done    | Displays the available actions                 |
| ~C-M-o~      | ivy-dispacthing-call    | Displays available actions, keeps Ivy open     |
| C-'        | ivy-avy                 | Uses Avy to select candidates                  |
| TAB        | ivy-partial-or-done     | Tab completion, repeated presses may call done |
|            | ivy-resume              | Restart Ivy before last action                 |

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) ")
    :bind
    (("C-s"     . 'swiper-isearch)
     ("M-x"     . 'counsel-M-x)
     ("M-y"     . 'counsel-yank-pop)
     ("C-x C-f" . 'counsel-find-file)
     ("C-x b"   . 'ivy-switch-buffer)

     ;; ("M-n" . ivy-next-history-element)
     ;; ("M-p" . ivy-previous-history-element)
     ;; ("M-i" . ivy-insert-current)
     ;; ("M-j" . ivy-yank-word)

     ("C-c C-r" . 'ivy-resume)
     ("C-c v"   . 'ivy-push-view)
     ("C-c V"   . 'ivy-pop-view)
     ("C-c k"   . 'counsel-rg)
     ("C-x l"   . 'counsel-locate)))
#+END_SRC

* multiple cursor

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :defer 5
    :bind
    (("C-x C-v" . 'mc/edit-lines)
     ("C->" . 'mc/mark-next-like-this)
     ("C-<" . 'mc/mark-previous-like-this)
     ("C-x C-a" . 'mc/mark-all-like-this)))
#+END_SRC

* magit & forge

** cherry pick [fn:1] [fn:2]

- ~M-x magit-status~ to enter open a Magit buffer
- ~b v~ to list current branches
- select branch to receive patch, RET to checkout
- ~l rl~ to list patches from this branch to the branch with the cherries (or l rL, long diff)
- select the patch to cherry-pick
- ~A~ to bring the patch onto the current branch

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)
           ("C-c g" . magit-dispatch-popup)))

  ;; (use-package forge
  ;;   :ensure t
  ;;   :after magit)
#+END_SRC

* ace window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("M-o" . 'ace-window)))
#+END_SRC

* which key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

* neotree

#+BEGIN_SRC emacs-lisp
  ;; https://github.com/jaypei/emacs-neotree
  ;; `n` next line, p previous line.
  ;; `SPC` or RET or TAB Open current item if it is a file. Fold/Unfold current item if it is a directory.
  ;; `U` Go up a directory
  ;; `g` Refresh
  ;; `A` Maximize/Minimize the NeoTree Window
  ;; `H` Toggle display hidden files
  ;; `O` Recursively open a directory
  ;; `C-c C-n` Create a file or create a directory if filename ends with a ‘/’
  ;; `C-c C-d` Delete a file or a directory.
  ;; `C-c C-r` Rename a file or a directory.
  ;; `C-c C-c` Change the root directory.
  ;; `C-c C-p` Copy a file or a directory.
  (use-package neotree
    :ensure t
    :bind
    (("s-t" . 'neotree-toggle))
    :config
    (setq neo-smart-open t)
    (setq neo-theme 'arrow))
#+END_SRC

* paredit

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :hook (('cider-repl-mode          . 'enable-paredit-mode)
           ('cider-mode               . 'enable-paredit-mode)
           ('clojure-mode             . 'enable-paredit-mode)
           ('emacs-lisp-mode          . 'enable-paredit-mode)
           ('ielm-mode                . 'enable-paredit-mode)
           ('lisp-mode                . 'enable-paredit-mode)
           ('lisp-interaction-mode    . 'enable-paredit-mode)
           ('scheme-mode              . 'enable-paredit-mode)
           ('haskell-interactive-mode . 'enable-paredit-mode)))
#+END_SRC

* smartparens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :hook (('prog-mode                . 'smartparens-mode)
           ('LaTeX-mode               . 'smartparens-mode)
           ('eshell-mode              . 'smartparens-mode)
           ('cider-mode               . 'smartparens-mode)
           ('cider-repl-mode          . 'smartparens-mode)
           ('haskell-interactive-mode . 'smartparens-mode))
    :bind
    (("C-M-a" . 'sp-beginning-of-sexp)
     ("C-M-e" . 'sp-end-of-sexp)
     ("C-M-f" . 'sp-forward-sexp)
     ("C-M-b" . 'sp-backward-sexp)
     ("C-M-n" . 'sp-next-sexp)
     ("C-M-p" . 'sp-previous-sexp)
     ("C-S-f" . 'sp-forward-symbol)
     ("C-S-b" . 'sp-backward-symbol)
     ("C-M-k" . 'sp-kill-sexp)
     ("C-M-w" . 'sp-copy-sexp)
     ("C-k"   . 'sp-kill-hybrid-sexp)
     ("M-k"   . 'sp-backward-kill-sexp))
    :config
    (require 'smartparens-config))
#+END_SRC

* rainbow

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook ('prog-mode . 'rainbow-delimiters-mode))
#+END_SRC

* language server protocol

- [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]
- [[https://elixirforum.com/t/emacs-elixir-setup-configuration-wiki/19196][elixir lsp setup]]
- [[https://github.com/rust-lang/rls][rust languague server]]

** emacs lsp-mode setup

use the following ~lsp-mode~ related config ~lsp-mode, lsp-ui, company-lsp, lsp-ivy, fly-check~

** rust languague server setup

*** install rust

*** install components

~rustup component add rls rust-analysis rust-src~

*** config emacs

- install ~rust-mode~
- hook ~('rust-mode . 'lsp)~

** elixir languague server setup

*** install elixir

*** compile euixir-ls

- ~git clone git@github.com:JakeBecker/elixir-ls.git~
- ~cd elixir-ls~
- ~mix deps.get~
- ~mix elixir_ls.release~ // This will create a release/language_server.sh

*** config emacs

- install ~elixir-mode(required)~ and ~exunit (optional)~
- config lsp-mode
  - hook ~('elixir-mode . 'lsp)~
  - exec-path ~(add-to-list 'exec-path "/path/to/elixir-ls/release")~

** python language server setup

- use pipenv to manage virtualenv and dependencies
- activate the env, and ~pip install 'python-language-server[all]'~
- in Emacs, ~M-x pyvenv-activate~

** config

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :defer 5
    ;; :init (setq lsp-keymap-prefix "s-g")
    :hook
    (('rust-mode   . 'lsp)
     ('elixir-mode . 'lsp)
     ('python-mode . 'lsp))
    :bind-keymap ("s-l" . 'lsp-command-map)
    :bind (:map lsp-command-map
                ("d s" . 'lsp-ui-doc-show)
                ("d h" . 'lsp-ui-doc-hide)))

  ;; https://github.com/emacs-lsp/lsp-ui
  ;;
  ;; xref-find-{definitions,references} (bound to m-. m-?
  (use-package lsp-ui
    :ensure t
    :defer 5
    :after lsp-mode
    :config
    (setq lsp-ui-doc-enable nil)
    (setq lsp-ui-doc-delay 5000))

  (use-package company-lsp
    :ensure t
    :defer 5
    :after lsp-mode)

  (use-package flycheck
    :ensure t
    :defer 5
    :after lsp-mode)

  (use-package lsp-ivy
    :ensure t
    :defer 5
    :after lsp-mode)
#+END_SRC

* clojure and cider

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :defer 5
    :hook (('clojure-mode . 'eldoc-mode))
    :config
    ;; compojure indentation
    (define-clojure-indent
      (defroutes 'defun)
      (GET 2)
      (POST 2)
      (PUT 2)
      (DELETE 2)
      (HEAD 2)
      (ANY 2)
      (OPTIONS 2)
      (PATCH 2)
      (rfn 2)
      (let-routes 1)
      (context 2)))

  (use-package cider
    :ensure t
    :after clojure-moed
    :config
    ;; go right to the REPL buffer when it's finished connecting
    (setq cider-repl-pop-to-buffer-on-connect t)

    ;; When there's a cider error, show its buffer and switch to it
    (setq cider-show-error-buffer t)
    (setq cider-auto-select-error-buffer t)
    (setq cider-test-show-report-on-success t)

    ;; Where to store the cider history.
    (setq cider-repl-history-file "~/.emacs.d/cider-history")

    ;; Wrap when navigating history.
    (setq cider-repl-wrap-history t)

    ;; turn off eldoc displayed when the cursor is over code
    (setq cider-prompt-for-symbol nil)

    ;; Just save without prompting, C-c C-k
    (setq cider-prompt-save-file-on-load 'always-save)

    ;; evaluate code in Clojure files, display result overlay to be font-locked
    (setq cider-overlays-use-font-lock t)

    (setq cider-refresh-show-log-buffer t)

    (setq cider-repl-tab-command #'indent-for-tab-command)

    (setq cider-eldoc-display-for-symbol-at-point nil)
    (setq cider-repl-display-help-banner nil))
#+END_SRC

* python

use lsp instead

#+BEGIN_SRC emacs-lisp
  ;; (defun python-mode-before-save-hook ()
  ;;   (when (eq major-mode 'python-mode)
  ;;     (elpy-format-code)))

  ;; (use-package elpy
  ;;   :ensure t
  ;;   :defer 5
  ;;   ;; M-<right> / M-<left> move block right/left
  ;;   ;; M-<up>    / M-<down> move block up/down
  ;;   :bind (("C-c M-f" . 'elpy-format-code)
  ;;          ("C-M-n"   . 'elpy-nav-forward-block)
  ;;          ("C-M-p"   . 'elpy-nav-backward-block))
  ;;   :config (setq elpy-rpc-virtualenv-path 'current)
  ;;   :hook ('before-save . #'python-mode-before-save-hook)
  ;;   :init (advice-add 'python-mode :before 'elpy-enable))
#+END_SRC

* rust

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :defer 5
    :config
    (setq rust-format-on-save t))
#+END_SRC

* elixir

#+BEGIN_SRC emacs-lisp
  (defun elixir-mode-before-save-hook ()
    (when (eq major-mode 'elixir-mode)
      (lsp-format-buffer)))

  (use-package elixir-mode
    :ensure t
    :defer 5
    :hook ('before-save . #'elixir-mode-before-save-hook))

  (use-package exunit
    :ensure t
    :after elixir-mode
    :bind (("C-c t a" . 'exunit-verify-all)
           ("C-c t t" . 'exunit-verify)
           ("C-c t s" . 'exunit-verify-single)))
#+END_SRC

* company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :hook ('prog-mode . 'global-company-mode)
    :config
    (company-tng-configure-default)
    (setq company-idle-delay 0.5)
    (setq company-minimum-prefix-length 3)
    (setq company-selection-wrap-around t)
    (setq company-tooltip-align-annotations t))
#+END_SRC

* expand region

#+BEGIN_SRC emacs-lisp
  ;; C-- C-= : contract the region
  (use-package expand-region
    :ensure t
    :defer 5
    :bind
    ("C-=" . 'er/expand-region))
#+END_SRC

* rest client

| C-c C-c | runs the query under the cursor                |
| C-c C-r | same but doesn't do anything with the response |
| C-c C-v | same but doesn't switch focus to other window  |
| TAB     | hide/show current request body                 |
| C-c C-a | show all collapsed regions                     |

#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :defer 5
    :mode ("\\.http\\'" . 'restclient-mode))
#+END_SRC

* org

** normal
|--------------+-----------------------------------------------------------------------------------------------------|
| C-u C-c C-c  | make plain list to checkbox list. cursor at the beginning will make the whole list to checkbox list |
| M-S-RET      | will add a new item with a checkbox                                                                 |
|--------------+-----------------------------------------------------------------------------------------------------|
| C-c C-x p    | Set a property. This prompts for a property name and a value                                        |
|--------------+-----------------------------------------------------------------------------------------------------|
| C-c C-x f    | add The footnote                                                                                    |
| C-c C-c      | Jump between definition and reference                                                               |
|--------------+-----------------------------------------------------------------------------------------------------|
| M-up/down    | move up/down current subtree                                                                        |
| M-left/right | Promote/demote current subtree                                                                      |
|--------------+-----------------------------------------------------------------------------------------------------|
| C-c /        | sparse tree                                                                                         |
|--------------+-----------------------------------------------------------------------------------------------------|
| C-c C-t      | Rotate the TODO state of the current item among (unmarked) -> TODO -> DONE -> (unmarked)            |
| S-M-RET      | insert TODO                                                                                         |
|--------------+-----------------------------------------------------------------------------------------------------|
| C-c C-q      | add tag                                                                                             |
|--------------+-----------------------------------------------------------------------------------------------------|
| M-TAB        | completion                                                                                          |


** date, schedule

- normal timestamp
  < 2006-11-01 Wed 19:15 >
- normal timestamp with repeater
  < 2007-05-16 Wed 12:30 +1w >
- timestamp range
  < 2004-08-23 Mon >--< 2004-08-26 Thu >
- timestamp won't be included in agenda
  [ 2006-11-01 Wed ]


|----------------+----------------------------------------------------------------------------------|
| C-c .          | Prompt for a date and insert a corresponding timestamp                           |
| C-c !          | but insert an inactive timestamp that will not cause an agenda entry             |
| C-c C-d        | Insert ‘DEADLINE’ keyword along with a stamp in the line following the headline  |
| C-c C-s        | Insert ‘SCHEDULED’ keyword along with a stamp in the line following the headline |
|----------------+----------------------------------------------------------------------------------|
| M-S-left/right | inc/dec month                                                                    |
| S-left/right   | inc/dec day                                                                      |
| S-up/down      | Change the item under the cursor in a timestamp                                  |
|----------------+----------------------------------------------------------------------------------|

** agenda
|-------+--------------------------------------------------------------------|
| C-c [ | Add current file to the list of agenda files.                      |
| C-c ] | Remove current file from the list of agenda files.                 |
| C-,   | Cycle through agenda file list, visiting one file after the other. |
| C-c a | agenda view                                                        |
|-------+--------------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :defer 5
    :bind
    (("C-c l" . 'org-store-link)
     ("C-c a" . 'org-agenda)
     ("C-c b" . 'org-switchb)
     ("C-c c" . 'org-capture))
    :config
    (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
    (setq org-html-checkbox-type 'html)
    (setq org-log-done 'time)
    (setq org-hide-emphasis-markers t)
    (setq org-image-actual-width nil)
    (setq org-default-notes-file "~/.emacs.d/notes.org")
    (setq org-todo-keywords
          '((sequence "TODO" "DOING" "|" "DONE" "CANCEL"))))

  (use-package org-bullets
    :ensure t
    :defer 5
    :hook ('org-mode . 'org-bullets-mode)
    ;; :config
    ;; (setq org-bullets-bullet-list '("⓪" "①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨"))
    :after org)

  (use-package htmlize
    :ensure t
    :defer 5
    :after org)

  (use-package toc-org
    :ensure t
    :defer 5
    :after org
    :hook ('org-mode . 'toc-org-mode))

  (use-package ox-gfm
    :ensure t
    :defer 5
    :after org)

  ;; https://github.com/yjwen/org-reveal
  ;;
  ;; Available themes can be found in “css/theme/” in the reveal.js directory. black|league|night|simple|solarized|beige|blood|moon|serif|sky|white
  ;; Available transitions are: default|cube|page|concave|zoom|linear|fade|none.
  (use-package ox-reveal
    :ensure t
    :defer 5
    :after org
    :config
    (setq org-reveal-mathjax t)
    (setq org-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.8.0/")
    ;; (setq org-reveal-root "/home/yuanbo/workspace/github.com/reveal.js")
    )
#+END_SRC

* abbrev

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Defining-Abbrevs.html][define abbrevs]]
[[https://www.emacswiki.org/emacs/AbbrevMode][abbrev mode]]
[[https://wilkesley.org/~ian/xah/emacs/emacs_abbrev_mode.html][abbrev mode tutorial]]

| C-x a i g                                             | add-inverse-global                                           |
| C-x a i l                                             | add-inverse-local                                            |
| C-x a g                                               | add-global-abbrev                                            |
| C-u 3 C-x a g                                         | how many words before point should be taken as the expansion |
| C-x a l                                               | add-mode-abbrev                                              |
| M-x define-global-abbrev <RET> abbrev <RET> exp <RET> | Define abbrev as an abbrev expanding into exp.               |

#+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode t)
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs")
  (setq save-abbrevs 'silent)
#+END_SRC

* undo tree

#+BEGIN_SRC emacs-lisp
  ;; https://elpa.gnu.org/packages/undo-tree.html
  ;; C-x u
  ;; C-_  (`undo-tree-undo') Undo changes.
  ;; M-_  (`undo-tree-redo') Redo changes.
  ;; (use-package undo-tree
  ;;   :ensure t
  ;;   :init
  ;;   (global-undo-tree-mode))
#+END_SRC

* misc packages

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :defer 5)

  (use-package toml-mode
    :ensure t
    :defer 5)

  (use-package markdown-mode
    :ensure t
    :defer 5)

  (use-package json-mode
    :ensure t
    :defer 5)

  (use-package dockerfile-mode
    :ensure t
    :defer 5)

  (use-package docker-compose-mode
    :ensure t
    :defer 5)
#+END_SRC
* avy
[[https://github.com/abo-abo/avy][avy]]

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    (("s-c" . 'avy-goto-char-2)))
#+END_SRC

* Highlights matching parenthesis

#+BEGIN_SRC emacs-lisp
  ;; https://github.com/tarsius/paren-face
  (use-package paren-face
    :ensure t
    :config
    (setq show-paren-delay 0)
    (show-paren-mode 1)
    (set-face-background 'show-paren-match (face-background 'default))
    (set-face-foreground 'show-paren-match "red")
    (set-face-attribute 'show-paren-match nil :strike-through t :weight 'extra-bold))
#+END_SRC

* whitespace cleanup

#+BEGIN_SRC emacs-lisp
  ;;;; trailing whitespace
  ;; https://stackoverflow.com/questions/34531831/highlighting-trailing-whitespace-in-emacs-without-changing-character
  (setq-default show-trailing-whitespace t)

  ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Useless-Whitespace.html
  ;; (global-whitespace-mode)

  (use-package whitespace-cleanup-mode
    :ensure t
    :bind (("C-c C-SPC". 'whitespace-cleanup))
    :hook
    (('prog-mode . 'whitespace-cleanup-mode)
     ('before-save . 'whitespace-cleanup)))
#+END_SRC
* pdf-tools

[[https://github.com/politza/pdf-tools][pdf-tools]]

#+caption: Navigation
| content                                    | key               |
|--------------------------------------------+-------------------|
| Scroll Up / Down by page-full              | space / backspace |
| Scroll Up / Down by line                   | C-n / C-p         |
| Scroll Right / Left                        | C-f / C-b         |
| Top of Page / Bottom of Page               | < / >             |
| Next Page / Previous Page                  | n / p             |
| First Page / Last Page                     | M-< / M->         |
| Incremental Search Forward / Backward      | C-s / C-r         |
| Occur (list all lines containing a phrase) | M-s o             |
| Pick a Link and Jump                       | F                 |
| Incremental Search in Links                | f                 |
| History Back / Forwards                    | B / N             |
| Display Outline                            | o                 |
| Jump to Page                               | M-g g             |

#+caption: Display
| content                                  | key       |
|------------------------------------------+-----------|
| Zoom in / Zoom out                       | + / -     |
| Fit Height / Fit Width / Fit Page        | H / W / P |
| Trim margins (set slice to bounding box) | s b       |
| Reset margins                            | s r       |
| Reset Zoom                               | 0         |

#+BEGIN_SRC emacs-lisp
  (use-package tablist
    :ensure t
    :defer 5)

  (use-package pdf-tools
    :ensure t
    :defer 5
    :config
    (pdf-loader-install))

#+END_SRC
* google this

#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :ensure t
    :defer 5)

  (global-set-key (kbd "C-x /") 'google-this-mode-submap)
#+END_SRC

* fci

fill-column-indicator

#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    ;; :hook
    ;; (('prog-mode . 'fci-mode))
    :config
    ;; (require 'fill-column-indicator)
    (setq fci-rule-column 80))

  ;; C-x f 'set-fill-column
  (global-set-key (kbd "C-c q") 'auto-fill-mode)
#+END_SRC
* ispell

| i | in ispell proc, insert to private dictionary |


#+BEGIN_SRC emacs-lisp
  (setq ispell-personal-dictionary "~/.emacs.d/ispell_dicts")
  (global-set-key (kbd "M-$")   'ispell-word)
  (global-set-key (kbd "C-M-i") 'ispell-complete-word)
#+END_SRC
* replace

** unconditional replace

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-r") 'replace-string)
#+END_SRC

** query replace

~M-%~

| y or space | Replace text and find the next occurrence      |
| n or del   | Leave text as is and find the next occurrence  |
| .          | Replace text then stop looking for occurrences |
| q or RET   | exit                                           |
| !          | Replace all occurrences without asking         |
| ^          | Return the cursor to previously replaced text  |
| u          | to undo previous replacement                   |
| U          | to undo all replacements                       |
| E          | to edit the replacement string                 |
* macros

- ~C-x (~
- ~C-x )~
- ~C-x e~
- ~name-last-kbd-macro~ and ~m-x the-macro-name~
- ~apply-macro-to-region-lines~

* mark ring

| C-Space C-Space | to push current position into mark ring                            |
| C-u C-Space     | Move cursor to previous marked position in current buffer          |
| C-x C-Space     | Move cursor to previous marked position (may be in another buffer) |
| C-x C-x         | Move cursor to the other end of selection                          |

* transpose

| transpose char  | Ctrl+t        |
| transpose word  | Meta+t        |
| transpose line  | Ctrl+x Ctrl+t |
| transpose sexps | Ctrl+Meta+t   |

* buffer move

#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t
    :defer 5)

  (global-set-key (kbd "<C-S-up>")     'buf-move-up)
  (global-set-key (kbd "<C-S-down>")   'buf-move-down)
  (global-set-key (kbd "<C-S-left>")   'buf-move-left)
  (global-set-key (kbd "<C-S-right>")  'buf-move-right)
#+END_SRC

* dired

| C-x C-q | edit               |
| t       | toggle mark        |
| u/U     | unmark/ unmark all |
| m       | mark               |
| d       | mark to delete     |
| D       | delete             |
| C       | copy               |
| R       | move, rename       |
| ~^~       | parent dir         |
| +       | create dir         |
| *-/     | mark all dirs      |
| s       | sort               |
|         |                    |

* command log

| Alt+x | global-command-log-mode (optional. Turn on logging for any buffer) |
| Alt+x | clm/open-command-log-buffer (show the key/command output buffer)   |

* window enlarge

#+BEGIN_SRC emacs-lisp
  ;; enlarge window vertically
  (global-set-key (kbd "C-c C-6") (kbd "C-u - 2 0 C-x ^"))
  ;; (global-set-key (kbd "C-c C-6") )

  ;; enlarge window horizontally
  (global-set-key (kbd "C-c C-]") (kbd "C-u - 2 0 C-x }"))
#+END_SRC

* dashboard

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)

    (setq dashboard-startup-banner 'official)
    (setq dashboard-banner-logo-title "Welcome to Emacs")
    (setq dashboard-set-init-info t)
    (setq dashboard-set-footer t)

    (setq dashboard-items '((projects . 5)
                            (recents  . 5))))
#+END_SRC
* Footnotes

[fn:1] [[https://emacs.stackexchange.com/questions/10611/how-to-easily-cherry-pick-with-magit][cherry pick with magit]]
[fn:2] [[https://www.emacswiki.org/emacs/MagitCherryPick][magit cherry pick]]
