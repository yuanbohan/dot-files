
#+PROPERTY: header-args :comments yes :results silent

* use-package

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  ;; if you use any :bind variant
  (use-package bind-key
    :ensure t
    :config
    (require 'bind-key))
#+END_SRC

* diminish

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (require 'diminish))
#+END_SRC

* backup

#+BEGIN_SRC emacs-lisp
  ;; https://www.emacswiki.org/emacs/BackupDirectory
  (setq backup-directory-alist
        `((".*" . "~/.emacs.d/backup/")))
  (setq auto-save-file-name-transforms
        `((".*" "~/.emacs.d/backup/" t)))
#+END_SRC

* replace tab with space
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)
#+END_SRC

* UI related

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t) ; hide the welcome screen
  (setq initial-major-mode 'text-mode)
  (setq column-number-mode t)
  (menu-bar-mode -1) ; hide menu bar
  (global-linum-mode -1) ; hide line number
  (tool-bar-mode -1) ; hide tool bar
  (scroll-bar-mode -1) ; hide scroll bar
  ;; (set-face-attribute 'default nil :height 240) ; default font size
  ;; (set-frame-font "JetBrains Mono 24" nil t) ; https://www.jetbrains.com/lp/mono/
  (set-frame-font "Ubuntu Mono 28" nil t) ; resolve org-mode chinese/english align issue

  (fset 'yes-or-no-p 'y-or-n-p) ; yes/no -> y/n
  (global-hl-line-mode 1) ; highlight current line
  ;; (set-face-background 'hl-line "darkseagreen") ; highlight current line color

  ;;;; trailing whitespace
  ;; https://stackoverflow.com/questions/34531831/highlighting-trailing-whitespace-in-emacs-without-changing-character
  (setq-default show-trailing-whitespace t)
  ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Useless-Whitespace.html
  ;; (global-whitespace-mode)
  ;; (setq whitespace-style '(face trailing lines tabs big-indent))

  ;; transparency
  (set-frame-parameter (selected-frame) 'alpha '(85 100))
  (add-to-list 'default-frame-alist '(alpha 85 100))
#+END_SRC

* global set key
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-g") 'goto-line)

  ;; manage window
  (global-set-key (kbd "C-M--") 'shrink-window-horizontally)
  (global-set-key (kbd "C-M-=") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-s--") 'shrink-window)
  (global-set-key (kbd "C-s-=") 'enlarge-window)

  ;; 'window-swap-states' swaps the states of two live windows.

  ;; hide show code block
  ;; (add-hook 'prog-mode-hook (lambda () (hs-minor-mode t)))
  ;; (global-set-key (kbd "C-c TAB") 'hs-toggle-hiding)
  ;; (global-set-key (kbd "C-c C-t") 'hs-hide-all)
  ;; (global-set-key (kbd "C-c C-s") 'hs-show-all)
#+END_SRC

* duplicate line
#+BEGIN_SRC emacs-lisp
  (defun duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank))
  (global-set-key (kbd "C-c C-d") 'duplicate-line)
#+END_SRC

* comment code

#+BEGIN_SRC emacs-lisp
  (defun comment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)))

  (global-set-key (kbd "C-;") 'comment-region-or-line)
#+END_SRC

* beacon

#+BEGIN_SRC emacs-lisp
  ;; https://github.com/Malabarba/beacon
  ;; (use-package beacon
  ;;   :ensure t
  ;;   :config
  ;;   (beacon-mode 1)
  ;;   (setq beacon-blink-duration 0.5)
  ;;   (setq beacon-color "green"))
#+END_SRC

* theme

#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :ensure t
    :config
    (load-theme 'dracula t))
#+END_SRC

* exec-path-from-shell

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)
      ;; (exec-path-from-shell-copy-envs '("PATH"))
      ))
#+END_SRC

* yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all)
    (setq yas-wrap-around-region t)
    :hook (('prog-mode     . 'yas-minor-mode)
           ('org-mode      . 'yas-minor-mode)
           ('LaTeX-mode    . 'yas-minor-mode)
           ('markdown-mode . 'yas-minor-mode)))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+END_SRC

* recentf

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :ensure t
    :config
    (recentf-mode 1)
    (setq recentf-max-saved-items 200
          recentf-max-menu-items 15)
    (run-at-time nil (* 5 60) 'recentf-save-list))
#+END_SRC

* projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    :bind-keymap
    ("C-c p"   . projectile-command-map))

  (use-package helm-projectile
      :ensure t
      :config
      (projectile-global-mode 1)
      (helm-projectile-on)
      ;; (setq projectile-completion-system 'helm)
      (setq projectile-switch-project-action 'helm-projectile)
      )
#+END_SRC

* counsel
  [[https://oremacs.com/swiper][counsel]]

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) ")
    :bind
    (("C-s"     . 'swiper-isearch)
     ("M-x"     . 'counsel-M-x)
     ("M-y"     . 'counsel-yank-pop)
     ("C-x C-f" . 'counsel-find-file)
     ("C-x b"   . 'ivy-switch-buffer)

     ;; ("M-n" . ivy-next-history-element)
     ;; ("M-p" . ivy-previous-history-element)
     ;; ("M-i" . ivy-insert-current)
     ;; ("M-j" . ivy-yank-word)

     ("C-c C-r" . 'ivy-resume)
     ("C-c v"   . 'ivy-push-view)
     ("C-c V"   . 'ivy-pop-view)
     ("C-c k"   . 'counsel-rg)
     ("C-x l"   . 'counsel-locate)))
#+END_SRC

* multiple cursor

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind
    (("C-x C-v" . 'mc/edit-lines)
     ("C->" . 'mc/mark-next-like-this)
     ("C-<" . 'mc/mark-previous-like-this)
     ("C-x C-a" . 'mc/mark-all-like-this)))
#+END_SRC

* magit & forge

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)
           ("C-c g" . magit-dispatch-popup)))

  ;; (use-package forge
  ;;   :ensure t
  ;;   :after magit)
#+END_SRC

* ace window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("M-o" . 'ace-window)))
#+END_SRC

* which key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

* neotree

#+BEGIN_SRC emacs-lisp
  ;; https://github.com/jaypei/emacs-neotree
  ;; `n` next line, p previous line.
  ;; `SPC` or RET or TAB Open current item if it is a file. Fold/Unfold current item if it is a directory.
  ;; `U` Go up a directory
  ;; `g` Refresh
  ;; `A` Maximize/Minimize the NeoTree Window
  ;; `H` Toggle display hidden files
  ;; `O` Recursively open a directory
  ;; `C-c C-n` Create a file or create a directory if filename ends with a ‘/’
  ;; `C-c C-d` Delete a file or a directory.
  ;; `C-c C-r` Rename a file or a directory.
  ;; `C-c C-c` Change the root directory.
  ;; `C-c C-p` Copy a file or a directory.
  (use-package neotree
    :ensure t
    :bind
    (("s-t" . 'neotree-toggle))
    :config
    (setq neo-smart-open t)
    (setq neo-theme 'arrow))
#+END_SRC

* paredit

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :hook (('cider-repl-mode          . 'enable-paredit-mode)
           ('cider-mode               . 'enable-paredit-mode)
           ('clojure-mode             . 'enable-paredit-mode)
           ('emacs-lisp-mode          . 'enable-paredit-mode)
           ('ielm-mode                . 'enable-paredit-mode)
           ('lisp-mode                . 'enable-paredit-mode)
           ('lisp-interaction-mode    . 'enable-paredit-mode)
           ('scheme-mode              . 'enable-paredit-mode)
           ('haskell-interactive-mode . 'enable-paredit-mode)))
#+END_SRC

* smartparens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :hook (('prog-mode                . 'smartparens-mode)
           ('LaTeX-mode               . 'smartparens-mode)
           ('eshell-mode              . 'smartparens-mode)
           ('cider-mode               . 'smartparens-mode)
           ('cider-repl-mode          . 'smartparens-mode)
           ('haskell-interactive-mode . 'smartparens-mode))
    :bind
    (("C-M-a" . 'sp-beginning-of-sexp)
     ("C-M-e" . 'sp-end-of-sexp)
     ("C-M-f" . 'sp-forward-sexp)
     ("C-M-b" . 'sp-backward-sexp)
     ("C-M-n" . 'sp-next-sexp)
     ("C-M-p" . 'sp-previous-sexp)
     ("C-S-f" . 'sp-forward-symbol)
     ("C-S-b" . 'sp-backward-symbol)
     ("C-M-k" . 'sp-kill-sexp)
     ("C-M-w" . 'sp-copy-sexp)
     ("C-k"   . 'sp-kill-hybrid-sexp)
     ("M-k"   . 'sp-backward-kill-sexp))
    :config
    (require 'smartparens-config))
#+END_SRC

* rainbow

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook ('prog-mode . 'rainbow-delimiters-mode))
#+END_SRC

* language server protocol

[[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]

~lsp-workspace-folder-remove~
~lsp-workspace-folder-add~


#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook
    (('lsp-mode    . 'lsp-enable-which-key-integration)
     ('rust-mode   . 'lsp)
     ('elixir-mode . 'lsp))
    :init
    (setq lsp-keymap-prefix "s-p")
    ;; https://elixirforum.com/t/emacs-elixir-setup-configuration-wiki/19196
    (add-to-list 'exec-path "/home/bobo/workspace/github.com/elixir-ls/release"))

  ;; https://github.com/emacs-lsp/lsp-ui
  ;;
  ;; xref-find-{definitions,references} (bound to M-. M-?
  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :init
    (setq lsp-ui-doc-enable nil)
    :bind
    (("s-p d" . 'lsp-ui-doc-show)))

  (use-package company-lsp
    :ensure t
    :after lsp-mode)

  (use-package flycheck
    :ensure t
    :after lsp-mode)

  (use-package lsp-ivy
    :ensure t
    :after lsp-mode)
#+END_SRC

* clojure and cider

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :hook (('clojure-mode . 'eldoc-mode)))

  ;; compojure indentation
  (define-clojure-indent
    (defroutes 'defun)
    (GET 2)
    (POST 2)
    (PUT 2)
    (DELETE 2)
    (HEAD 2)
    (ANY 2)
    (OPTIONS 2)
    (PATCH 2)
    (rfn 2)
    (let-routes 1)
    (context 2))

  (use-package cider
    :ensure t
    :config
    ;; go right to the REPL buffer when it's finished connecting
    (setq cider-repl-pop-to-buffer-on-connect t)

    ;; When there's a cider error, show its buffer and switch to it
    (setq cider-show-error-buffer t)
    (setq cider-auto-select-error-buffer t)
    (setq cider-test-show-report-on-success t)

    ;; Where to store the cider history.
    (setq cider-repl-history-file "~/.emacs.d/cider-history")

    ;; Wrap when navigating history.
    (setq cider-repl-wrap-history t)

    ;; turn off eldoc displayed when the cursor is over code
    (setq cider-prompt-for-symbol nil)

    ;; Just save without prompting, C-c C-k
    (setq cider-prompt-save-file-on-load 'always-save)

    ;; evaluate code in Clojure files, display result overlay to be font-locked
    (setq cider-overlays-use-font-lock t)

    (setq cider-refresh-show-log-buffer t)

    (setq cider-repl-tab-command #'indent-for-tab-command)

    (setq cider-eldoc-display-for-symbol-at-point nil)
    (setq cider-repl-display-help-banner nil))
#+END_SRC

* python

#+BEGIN_SRC emacs-lisp
  (defun python-mode-before-save-hook ()
    (when (eq major-mode 'python-mode)
      (elpy-format-code)))

  (use-package elpy
    :ensure t
    :defer t
    ;; M-<right> / M-<left> move block right/left
    ;; M-<up>    / M-<down> move block up/down
    :bind (("C-c M-f" . 'elpy-format-code)
           ("C-M-n"   . 'elpy-nav-forward-block)
           ("C-M-p"   . 'elpy-nav-backward-block))
    :config (setq elpy-rpc-virtualenv-path 'current)
    :hook ('before-save . #'python-mode-before-save-hook)
    :init (advice-add 'python-mode :before 'elpy-enable))
#+END_SRC

* rust

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :config
    (setq rust-format-on-save t))
#+END_SRC

* elixir

#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode
    :ensure t)

  (use-package elixir-yasnippets
    :ensure t
    :after elixir-mode)
#+END_SRC

* company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :hook ('prog-mode . 'global-company-mode)
    :config
    (company-tng-configure-default)
    (setq company-idle-delay 0.5)
    (setq company-minimum-prefix-length 3)
    (setq company-selection-wrap-around t)
    (setq company-tooltip-align-annotations t))
#+END_SRC

* expand region

#+BEGIN_SRC emacs-lisp
  ;; C-- C-= : contract the region
  (use-package expand-region
    :ensure t
    :bind
    ("C-=" . 'er/expand-region))
#+END_SRC

* rest client

#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :mode "\\.http\\'")
#+END_SRC

* org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :bind
    (("C-c l" . 'org-store-link)
     ("C-c a" . 'org-agenda)
     ("C-c b" . 'org-switchb)
     ("C-c c" . 'org-capture))
    :config
    (require 'ox-md) ; https://orgmode.org/manual/Exporting.html
    ;; https://stackoverflow.com/questions/22065589/org-mode-html-export-with-checkbox
    (setq org-html-checkbox-type 'html)
    ;; https://orgmode.org/manual/Languages.html
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)))
    (setq org-log-done 'time)
    (setq org-hide-emphasis-markers t)
    (setq org-image-actual-width nil)
    (setq org-default-notes-file "~/.emacs.d/notes.org")
    (setq org-todo-keywords
          '((sequence "TODO" "DOING" "|" "DONE" "CANCEL"))))

  (use-package org-bullets
    :ensure t
    ;; :hook ('org-mode . (lambda () (org-bullets-mode 1)))
    :hook ('org-mode . 'org-bullets-mode)
    ;; :config
    ;; (setq org-bullets-bullet-list '("⓪" "①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨"))
    :after org)

  (use-package htmlize
    :ensure t
    :after org)

  (use-package ox-gfm
    :ensure t
    :after org)

  (use-package toc-org
    :ensure t
    :after org
    :hook ('org-mode . 'toc-org-mode))

  ;; https://github.com/yjwen/org-reveal
  ;;
  ;; Available themes can be found in “css/theme/” in the reveal.js directory. black|league|night|simple|solarized|beige|blood|moon|serif|sky|white
  ;; Available transitions are: default|cube|page|concave|zoom|linear|fade|none.
  (use-package ox-reveal
    :ensure t
    :after org
    :config
    (setq org-reveal-mathjax t)
    ;; (setq org-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.8.0/")
    (setq org-reveal-root "/home/yuanbo/workspace/github.com/reveal.js"))
#+END_SRC

* powerline

#+BEGIN_SRC emacs-lisp
  ;; (use-package powerline
  ;;   :ensure t
  ;;   :config
  ;;   (powerline-default-theme)
  ;;   ;; (powerline-center-theme)
  ;;   ;; (powerline-center-evil-theme)
  ;;   ;; (powerline-vim-theme)
  ;;   ;; (powerline-nano-theme)
  ;;   )
#+END_SRC

* abbrev

#+BEGIN_SRC emacs-lisp
  ;; https://www.emacswiki.org/emacs/AbbrevMode
  ;; C-x a i g add-inverse-global
  ;; C-x a i l add-inverse-local
  ;; (setq-default abbrev-mode t)
  ;; (setq abbrev-file-name             ;; tell emacs where to read abbrev
  ;;       "~/.emacs.d/abbrev_defs")    ;; definitions from...
  ;; (setq save-abbrevs 'silent)        ;; save abbrevs when files are saved
#+END_SRC

* undo tree

#+BEGIN_SRC emacs-lisp
  ;; https://elpa.gnu.org/packages/undo-tree.html
  ;; C-x u
  ;; C-_  (`undo-tree-undo') Undo changes.
  ;; M-_  (`undo-tree-redo') Redo changes.
  ;; (use-package undo-tree
  ;;   :ensure t
  ;;   :init
  ;;   (global-undo-tree-mode))
#+END_SRC

* misc packages
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)

  (use-package toml-mode
    :ensure t)

  (use-package markdown-mode
    :ensure t)

  (use-package json-mode
    :ensure t)
#+END_SRC
* avy
[[https://github.com/abo-abo/avy][avy]]

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    (("s-c" . 'avy-goto-char-2)))
#+END_SRC

* Highlights matching parenthesis

#+BEGIN_SRC emacs-lisp
  ;; https://github.com/tarsius/paren-face
  (use-package paren-face
    :ensure t
    :config
    (setq show-paren-delay 0)
    (show-paren-mode 1)
    (set-face-background 'show-paren-match (face-background 'default))
    (set-face-foreground 'show-paren-match "red")
    (set-face-attribute 'show-paren-match nil :strike-through t :weight 'extra-bold))
#+END_SRC

* whitespace cleanup

#+BEGIN_SRC emacs-lisp
  (use-package whitespace-cleanup-mode
    :ensure t
    :bind (("C-c C-SPC". 'whitespace-cleanup))
    :hook
    (('prog-mode . 'whitespace-cleanup-mode)))
#+END_SRC
* pdf-tools

[[https://github.com/politza/pdf-tools][pdf-tools]]

#+caption: Navigation
| content                                    | key               |
|--------------------------------------------+-------------------|
| Scroll Up / Down by page-full              | space / backspace |
| Scroll Up / Down by line                   | C-n / C-p         |
| Scroll Right / Left                        | C-f / C-b         |
| Top of Page / Bottom of Page               | < / >             |
| Next Page / Previous Page                  | n / p             |
| First Page / Last Page                     | M-< / M->         |
| Incremental Search Forward / Backward      | C-s / C-r         |
| Occur (list all lines containing a phrase) | M-s o             |
| Pick a Link and Jump                       | F                 |
| Incremental Search in Links                | f                 |
| History Back / Forwards                    | B / N             |
| Display Outline                            | o                 |
| Jump to Page                               | M-g g             |

#+caption: Display
| content                                  | key       |
|------------------------------------------+-----------|
| Zoom in / Zoom out                       | + / -     |
| Fit Height / Fit Width / Fit Page        | H / W / P |
| Trim margins (set slice to bounding box) | s b       |
| Reset margins                            | s r       |
| Reset Zoom                               | 0         |

#+BEGIN_SRC emacs-lisp
  (use-package tablist
    :ensure t)

  (use-package pdf-tools
    :ensure t
    :config
    (pdf-loader-install))

#+END_SRC
* fill-column-indicator

#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :hook
    (('prog-mode . 'fci-mode))
    :config
    (require 'fill-column-indicator)
    (setq fci-rule-column 100))
#+END_SRC
